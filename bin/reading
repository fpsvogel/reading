#!/usr/bin/env ruby

# Starts the reading statistics interactive CLI, if a CSV file path arg is given.
# If a CSV string is given instead, then parsing output (item hashes) is displayed.
#
# Usage:
# Run on the command line:
#   reading "<CSV file path or string>" "<optional comma-separated names of enabled columns>"
#
# Examples:
#   reading /home/felipe/reading.csv
#   reading /home/felipe/reading.csv 'head, sources'
#   reading '3|ðŸ“•Trying|Little Library 1970147288'
#   reading 'ðŸ“•Trying|Little Library 1970147288' 'head, sources'

require_relative "../lib/reading"
require_relative "../lib/reading/stats/result_formatters"
require "debug"
require "amazing_print"
require "readline"
require "pastel"

EXIT_COMMANDS = %w[exit e quit q]
PASTEL = Pastel.new
GROUP_HEADING_FORMATTERS = [
  -> { PASTEL.magenta.bold.underline(_1) },
  -> { PASTEL.green.bold.underline(_1) },
  -> { PASTEL.yellow.bold.underline(_1) },
  -> { PASTEL.cyan.bold.underline(_1) },
  -> { PASTEL.magenta.on_white(_1) },
  -> { PASTEL.green.on_white(_1) },
  -> { PASTEL.yellow.on_white(_1) },
]

# Recursively prints a hash of results (possibly grouped).
# @param grouped_results [Hash, Array]
# @param group_heading_formatters [Array<Proc>] a subset of GROUP_HEADING_FORMATTERS
def print_grouped_results(grouped_results, group_heading_formatters)
  indent_level = GROUP_HEADING_FORMATTERS.count - group_heading_formatters.count

  if grouped_results.nil? || (grouped_results.respond_to?(:empty?) && grouped_results.empty?)
    puts "  " * indent_level + PASTEL.bright_black("none") + "\n"
    return
  end

  if grouped_results.is_a?(Hash) ||
    (grouped_results.is_a?(Array) && grouped_results.first.length == 2)

    grouped_results.each do |group_name, grouped|
      puts "  " * indent_level + group_heading_formatters.first.call(group_name)
      print_grouped_results(grouped, group_heading_formatters[1..])
    end
  elsif grouped_results.is_a?(Array)
    numbered_results = grouped_results.map.with_index { |v, i| "#{i + 1}. #{v}" }

    puts "  " * indent_level + numbered_results.join("\n" + "  " * indent_level) + "\n"
  else
    puts "  " * indent_level + grouped_results.to_s + "\n"
  end
end

input = ARGV[0]
unless input
  raise ArgumentError,
    "Argument required, either a CSV file path or a CSV string.\nExamples:\n" \
    "reading /home/felipe/reading.csv\n" \
    "reading '3|ðŸ“•Trying|Little Library 1970147288'"
end

if ARGV[1]
  enabled_columns = ARGV[1].split(",").map(&:strip).map(&:to_sym)
  Reading::Config.build(enabled_columns:)
end

input_is_csv_path = input.end_with?(".csv") || input.end_with?(".txt")

if input_is_csv_path
  error_handler = ->(e) { puts "Skipped a row due to a parsing error: #{e}" }

  items = Reading.parse(path: input, item_view: false, error_handler:)

  loop do
    raw_input = Readline.readline(PASTEL.bright_cyan("> "), true)

    exit if EXIT_COMMANDS.include?(raw_input)

    input = raw_input.presence
    next if raw_input.blank?

    results = Reading.stats(
      input:,
      items:,
      result_formatters: Reading::Stats::ResultFormatters::TERMINAL,
    )

    if results.is_a?(Array) && results.first.is_a?(Reading::Item) # `debug` operation
      r = results
      puts PASTEL.red.bold("Enter 'c' to leave the debugger.")
      debugger
    else
      print_grouped_results(results, GROUP_HEADING_FORMATTERS)
    end
  rescue Reading::Error => e
    puts e
  end
else # CSV string arg
  input = input.gsub("\\|", "|") # because some pipes are escaped when pasting into the terminal

  begin
    item_hashes = Reading.parse(lines: input, hash_output: true, item_view: false)
  rescue Reading::Error => e
    puts "Skipped a row due to a parsing error: #{e}"
  end

  ap item_hashes
end
