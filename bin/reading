#!/usr/bin/env ruby

# Starts the reading statistics interactive CLI, if a CSV file path arg is given.
# If a CSV string is given instead, then parsing output (item hashes) is displayed.
#
# Usage:
# Run on the command line:
#   reading "<CSV file path or string>" "<optional comma-separated names of enabled columns>"
#
# Examples:
#   reading /home/felipe/reading.csv
#   reading /home/felipe/reading.csv 'head, sources'
#   reading '3|ðŸ“•Trying|Little Library 1970147288'
#   reading 'ðŸ“•Trying|Little Library 1970147288' 'head, sources'

require 'debug'
require_relative '../lib/reading'
require_relative '../lib/reading/stats/terminal_result_formatters'
require 'amazing_print'
require 'readline'
require 'pastel'

EXIT_COMMANDS = %w[exit e quit q]
PASTEL = Pastel.new

input = ARGV[0]
unless input
  raise ArgumentError,
    "Argument required, either a CSV file path or a CSV string. Examples:\n" \
    "parsereading /home/felipe/reading.csv\n" \
    "parsereading '3|ðŸ“•Trying|Little Library 1970147288'"
end

config = {}
if ARGV[1]
  enabled_columns = ARGV[1].split(",").map(&:strip).map(&:to_sym)
  config = { enabled_columns: }
end

input_is_csv_path = input.end_with?('.csv')

if input_is_csv_path
  items = Reading.parse(path: input, config:, item_view: false)

  loop do
    raw_input = Readline.readline(PASTEL.bright_cyan("> "), true)

    exit if EXIT_COMMANDS.include?(raw_input)

    input = raw_input.presence
    next if raw_input.blank?

    puts Reading.stats(
      input:,
      items:,
      result_formatters: Reading::Stats::ResultFormatters::TERMINAL,
    )
  end
else # CSV string arg
  item_hashes = Reading.parse(lines: input, config:, hash_output: true, item_view: false)

  ap item_hashes
end
